// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ChatItemType chat item type
//
// swagger:model chatItemType
type ChatItemType string

const (

	// ChatItemTypeRECIPE captures enum value "RECIPE"
	ChatItemTypeRECIPE ChatItemType = "RECIPE"

	// ChatItemTypeMESSAGE captures enum value "MESSAGE"
	ChatItemTypeMESSAGE ChatItemType = "MESSAGE"

	// ChatItemTypeINGREDIENT captures enum value "INGREDIENT"
	ChatItemTypeINGREDIENT ChatItemType = "INGREDIENT"

	// ChatItemTypeINGREDIENTACTION captures enum value "INGREDIENT_ACTION"
	ChatItemTypeINGREDIENTACTION ChatItemType = "INGREDIENT_ACTION"
)

// for schema
var chatItemTypeEnum []interface{}

func init() {
	var res []ChatItemType
	if err := json.Unmarshal([]byte(`["RECIPE","MESSAGE","INGREDIENT","INGREDIENT_ACTION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chatItemTypeEnum = append(chatItemTypeEnum, v)
	}
}

func (m ChatItemType) validateChatItemTypeEnum(path, location string, value ChatItemType) error {
	if err := validate.EnumCase(path, location, value, chatItemTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this chat item type
func (m ChatItemType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateChatItemTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
