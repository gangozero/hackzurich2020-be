// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/gangozero/hackzurich2020-be/generated/models"
)

// InitiateCookingNoContentCode is the HTTP code returned for type InitiateCookingNoContent
const InitiateCookingNoContentCode int = 204

/*InitiateCookingNoContent Invited

swagger:response initiateCookingNoContent
*/
type InitiateCookingNoContent struct {
}

// NewInitiateCookingNoContent creates InitiateCookingNoContent with default headers values
func NewInitiateCookingNoContent() *InitiateCookingNoContent {

	return &InitiateCookingNoContent{}
}

// WriteResponse to the client
func (o *InitiateCookingNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

/*InitiateCookingDefault Error

swagger:response initiateCookingDefault
*/
type InitiateCookingDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewInitiateCookingDefault creates InitiateCookingDefault with default headers values
func NewInitiateCookingDefault(code int) *InitiateCookingDefault {
	if code <= 0 {
		code = 500
	}

	return &InitiateCookingDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the initiate cooking default response
func (o *InitiateCookingDefault) WithStatusCode(code int) *InitiateCookingDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the initiate cooking default response
func (o *InitiateCookingDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the initiate cooking default response
func (o *InitiateCookingDefault) WithPayload(payload *models.Error) *InitiateCookingDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the initiate cooking default response
func (o *InitiateCookingDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *InitiateCookingDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
