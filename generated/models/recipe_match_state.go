// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RecipeMatchState recipe match state
//
// swagger:model recipeMatchState
type RecipeMatchState string

const (

	// RecipeMatchStateNEW captures enum value "NEW"
	RecipeMatchStateNEW RecipeMatchState = "NEW"

	// RecipeMatchStateINVITED captures enum value "INVITED"
	RecipeMatchStateINVITED RecipeMatchState = "INVITED"

	// RecipeMatchStateACCEPTED captures enum value "ACCEPTED"
	RecipeMatchStateACCEPTED RecipeMatchState = "ACCEPTED"

	// RecipeMatchStateNOTNOW captures enum value "NOT_NOW"
	RecipeMatchStateNOTNOW RecipeMatchState = "NOT_NOW"
)

// for schema
var recipeMatchStateEnum []interface{}

func init() {
	var res []RecipeMatchState
	if err := json.Unmarshal([]byte(`["NEW","INVITED","ACCEPTED","NOT_NOW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recipeMatchStateEnum = append(recipeMatchStateEnum, v)
	}
}

func (m RecipeMatchState) validateRecipeMatchStateEnum(path, location string, value RecipeMatchState) error {
	if err := validate.EnumCase(path, location, value, recipeMatchStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this recipe match state
func (m RecipeMatchState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRecipeMatchStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
